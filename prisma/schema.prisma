// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phnno     BigInt   @unique
  address   String
  role      Role     @default(USER)
  cart      Cart?    
  orders    Order[]
  wishlist  Wishlist[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]
  isVerify    Boolean @default(false)
}


enum Role {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int? 
  quantity    Int?
  category    Category @relation(fields: [categoryId], references: [id])
  image       String? 
  categoryId  String
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  CartItem CartItem[]
  OrderItem OrderItem[]
  Wishlist Wishlist[]
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id         String   @id @default(uuid())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  address   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Delivery Delivery[]
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  DISPATCHED
  DELIVERED
  CANCELLED
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  message   String
  createdAt DateTime @default(now())
}

model Delivery {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  status     DeliveryStatus @default(ASSIGNED)
  deliveryPerson String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum DeliveryStatus {
  ASSIGNED
  IN_TRANSIT
  DELIVERED
}